View(filter_protests)
View(filter_protests("Environment", "Environment; against noise"))
filter_protests <- function(purpose, position_taken) {
filter <- data_protest[data_protest$Event..legacy..see.tags., purpose, ]
if (is.null(position_taken)) {
return(filter)
} else {
positions_and_purposes <- filter[filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; against noise"))
change_july_protests <- length(date[date >= "2019-07-01"]) & length(date[date <= "2019-07-31"]) -
length(date[date >= "2020-07-01"]) & length(date[date <= "2020-07-31"])
july_2019 <- length(date[date >= "2019-07-01"]) & length(date[date <= "2019-07-31"])
filter_protests <- function(purpose, position_taken) {
filter <- data_protest[data_protest$Event..legacy..see.tags., purpose, ]
if (is.null(position_taken)) {
return(filter)
} else {
positions_and_purposes <- filter[filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; against noise"))
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- str_detect[data_protest[data_protest$Event..legacy..see.tags., purpose, ]]
if (is.null(position_taken)) {
return(protest_filter)
}
}
View(filter_protests("Environment", "Environment; against noise"))
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags., purpose, ]
if (is.null(position_taken)) {
return(filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; against noise"))
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags., purpose, ]
if (!is.null(position_taken)) {
return(filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; against noise"))
(filter_protests("Environment", "Environment; against noise"))
filter_protests("Environment", "Environment; against noise")
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags., purpose, ]
if (is.null(position_taken)) {
return(filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags = position_taken, ]
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags., purpose, ]
if (is.null(position_taken)) {
return(filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
filter_protests("Environment", "Environment; against noise")
filter_protests("Environment", "Environment; for renewable energy")
filter_protests("Environment", "Environment; For renewable energy")
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags. == purpose, ]
if (is.null(position_taken)) {
return(protest_filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
filter_protests("Environment", "Environment; For renewable energy")
View(filter_protests("Environment", "Environment; For renewable energy"))
filter_and_report <- function(purpose, position_taken){
filter_positions(purpose, position_taken)
filtered_protests <- format_doc(filter_positions, purpose, position_taken)
return(paste0(filtered_protests))
}
write_report(filter_and_report)
format_doc <- function(protest_df, purpose, position_taken=NULL) {
# Heading components
heading1 <- paste("# Protest purpose: ", purpose, "\n")
heading2 <- "\n"
if (!is.null(position_taken)) {
heading2 <- paste("## Position taken: ", position_taken, "\n")
}
# Summary component
num_protests <- format(nrow(protest_df), big.mark=",")
total_attendees <- format(sum(protest_df$Attendees, na.rm=TRUE), big.mark=",")
summary <- paste0("_Summary_\n\n",
"* Number of Protests: ", num_protests, "\n",
"* Total Attendees: ", total_attendees, "\n\n",
"_List of Protests (Attendees)_\n\n")
# List of protests component (Note: Bullet_list is a vector)
bullet_list <- paste0("* ", protest_df$Date, ": ", protest_df$Location,
" [Article](", protest_df$Source, ")", " (_", protest_df$Attendees, "_)\n")
# Collapse the vector into a string
url_str <- paste0(bullet_list, collapse="")
# Paste together each of the report components
md_doc <- paste0(heading1, heading2, summary, url_str)
return(md_doc)
}
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine #call this for 6
write_report <- function(md_doc, fname="~/Documents/info201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
write_report(filter_and_report)
filter_and_report()
#    your function. (Variable: `filter_and_report`)
filter_and_report <- function(purpose, position_taken=NULL){
protests_filtered(purpose, position_taken)
final_report <- format_doc(protests_filtered, purpose, position_taken)
return(final_report)
}
filter_and_report()
filter_and_report <- function(purpose, position_taken=NULL){
protests_filtered <- protests_filtered(purpose, position_taken)
final_report <- format_doc(protests_filtered, purpose, position_taken)
return(final_report)
}
filter_and_report()
View(filter_protests("Environment", "Environment; For renewable energy"))
write_report(filter_and_report)
filter_and_report("Environment", "Environment; For renewable energy")
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags. == purpose]
if (!is.null(position_taken)) {
return(protest_filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; For renewable energy"))
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags. == purpose]
if (is.null(position_taken)) {
return(protest_filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; For renewable energy"))
View(filter_protests("Environment", "Environment; For renewable energy"))
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags. == purpose]
if (is.null(position_taken)) {
return(protest_filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; For renewable energy"))
filter_protests <- function(purpose, position_taken=NULL) {
protest_filter <- data_protest[data_protest$Event..legacy..see.tags. == purpose, ]
if (is.null(position_taken)) {
return(protest_filter)
} else {
positions_and_purposes <- protest_filter[protest_filter$Tags == position_taken, ]
return(positions_and_purposes)
}
}
View(filter_protests("Environment", "Environment; For renewable energy"))
# 4g: What is the ratio of the number of protests in 2020 compared to 2019? (Variable: `ratio_2020_2019`)
ratio_2020_2019 <- length(in_2020) / length(in_2019)
# 4f: Create a vector of the dates that are in 2019. (Variable: `in_2019`)
in_2019 <- seq(as.Date("2019-01-01"), as.Date("2019-12-31", by = "days"))
# 4a: Extract the `Date` column into a variable called `dates` by passing the
#    column to the `as.Date()` function. (Note: The `as.Date()` function will
#    process the values as dates, which are *fortunately* already in an optimal
#    format for parsing.) (Variable: `dates`)
dates <- as.Date(data_protest$Date)
# 4b: What is the most recent date in the dataset? (Variable: `most_recent`)
most_recent <- max(dates)
# 4c: What is the earliest date in the dataset? (Variable: `earliest`)
earliest <- min(dates)
# 4d: What is the length of the time span of the dataset? (Hint: R can do math with
#    dates pretty well by default!) (Variable: `time_span`)
time_span <- most_recent - earliest
# 4d: What is the length of the time span of the dataset? (Hint: R can do math with
#    dates pretty well by default!) (Variable: `time_span`)
time_span <- sum(most_recent - earliest)
# 4g: What is the ratio of the number of protests in 2020 compared to 2019? (Variable: `ratio_2020_2019`)
ratio_2020_2019 <- length(in_2020) / length(in_2019)
# 4f: Create a vector of the dates that are in 2019. (Variable: `in_2019`)
in_2019 <- seq(as.Date("2019-01-01"), as.Date("2019-12-31", by = "days"))
# 4e: Create a vector of the dates that are in 2020. (Variable: `in_2020`)
# double check this one & 2019
in_2020 <- seq(as.Date("2020-01-01"), as.Date("2020-12-31"), by = "quarter")
# 4f: Create a vector of the dates that are in 2019. (Variable: `in_2019`)
in_2019 <- seq(as.Date("2019-01-01"), as.Date("2019-12-31", by = "quarter"))
# 4f: Create a vector of the dates that are in 2019. (Variable: `in_2019`)
in_2019 <- seq(as.Date("2019-01-01"), as.Date("2019-12-31", by = "quarter")
# 4e: Create a vector of the dates that are in 2020. (Variable: `in_2020`)
# double check this one & 2019
in_2020 <- seq(as.Date("2020-01-01"), as.Date("2020-12-31"), by = "days")
# 4e: Create a vector of the dates that are in 2020. (Variable: `in_2020`)
# double check this one & 2019
in_2020 <- seq(as.Date("2020-01-01"), as.Date("2020-12-31"), by = "days")
# 4f: Create a vector of the dates that are in 2019. (Variable: `in_2019`)
in_2019 <- seq(as.Date("2019-01-01"), as.Date("2019-12-31"), by = "days")
# 4g: What is the ratio of the number of protests in 2020 compared to 2019? (Variable: `ratio_2020_2019`)
ratio_2020_2019 <- length(in_2020) / length(in_2019)
july_2019 <- (date[date >= "2019-07-01"]) & (date[date <= "2019-07-31"])
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- (date[date >= "2019-07-01"]) & (date[date <= "2019-07-31"])
library(stringr)
july_2019 <- (date[date >= "2019-07-01"]) & (date[date <= "2019-07-31"])
# 3l: Create a summary table by passing your `states` variable to the
#    `table()` function and by storing the result in the variable `state_table`.
#
#    *SUGGESTION:* Use the View() function to more easily examine the table. (Variable: `state_table`)
state_table <- table(states)
View(state_table)
# 3m: What was the maximum number of protests in a state? (Hint: Use the
#    `state_table` variable.) (Variable: `max_in_state`)
max_in_state <- state_table(max(num_attendees)) # I need to double check this
# 3l: Create a summary table by passing your `states` variable to the
#    `table()` function and by storing the result in the variable `state_table`.
#
#    *SUGGESTION:* Use the View() function to more easily examine the table. (Variable: `state_table`)
state_table <- table(states)
# 3m: What was the maximum number of protests in a state? (Hint: Use the
#    `state_table` variable.) (Variable: `max_in_state`)
max_in_state <- state_table(max(num_attendees)) # I need to double check this
# 3m: What was the maximum number of protests in a state? (Hint: Use the
#    `state_table` variable.) (Variable: `max_in_state`)
max_in_state <- max(num_attendees) # I need to double check this
# 3m: What was the maximum number of protests in a state? (Hint: Use the
#    `state_table` variable.) (Variable: `max_in_state`)
max_in_state <- max(state_table(num_attendees)) # I need to double check this
# 3m: What was the maximum number of protests in a state? (Hint: Use the
#    `state_table` variable.) (Variable: `max_in_state`)
max_in_state <- max(state_table, na.rm = TRUE) # I need to double check this
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- date[date >= "2019-07-01"] & date[date <= "2019-07-31"]
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- seq(as.Date("2019-07-01"), as.Date("2019-07-31"), by = "days")
july_2020 <- seq(as.Date("2020-07-01"), as.Date("2020-07-31"), by = "days")
change_july_protests <- length(july_2020) - length(july_2019)
change_july_protests <- july_2020 - july_2019
change_july_protests <- length(july_2020) - length(july_2019)
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- (date[date >= "2019-07-01"]) & (date[date <= "2019-07-31"])
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- (dates[dates >= "2019-07-01"]) & (dates[dates <= "2019-07-31"])
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- length(date[date >= "2019-07-01"]) & length(date[date <= "2019-07-31"])
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- print(high_level_purpose)
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- paste0(high_level_purpose)
# 4k: How many protests occurred each month in 2020? (Hint: Use the `months()`
#    function, your `in_2020` dates, and the `table()` function. If you like, you
#    can do this in multiple steps.) (Variable: `by_month_table`)
protest_each_month <- table(months(in_2020))
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
# QUESTION
july_2019 <- (date[date >= "2019-07-01"]) & (date[date <= "2019-07-31"])
july_2019 <- as.Date(c("2019-07-01", "2019-07-31"))
sum_2019 <- july_2019[1] + july_2019[2]
sum_2019 <- sum(july_2019[1] + july_2019[2])
library(stringr)
# 3k: Create a summary sentence for each state by passing your `uniq_states`
#    variable and `count_in_location` variables to the `sapply()` function.
#    (Hint: Study section 8.3 in the textbook. It is important to understand
#    the `sapply()` and `lapply()` functions.) (Variable: `state_summary`)
state_summary <- sapply(uniq_states, count_in_location)
# 3i: Create a new vector `states` that holds the state locations, that is, the
#    last two characters of each value in the `locations` vector. (Hint: You may
#    want to again use a function from the `stringr` package
#    Check, for example, the `str_sub()` function.) (Variable: `states`)
states <- str_sub(locations, start = -2, end = -1)
# 3j: Create a vector of the unique states in your dataset. (Variable: `uniq_states`)
uniq_states <- unique(states)
length(uniq_states)
# 3k: Create a summary sentence for each state by passing your `uniq_states`
#    variable and `count_in_location` variables to the `sapply()` function.
#    (Hint: Study section 8.3 in the textbook. It is important to understand
#    the `sapply()` and `lapply()` functions.) (Variable: `state_summary`)
state_summary <- sapply(uniq_states, count_in_location)
july_2019 <- table(months(in_2019))
change_july_protests <- protest_each_month["July"] - july_2019["July"]
change_july_protests
by_month_table_2019 <- table(months(in_2019))
View(by_month_table_2019)
july_2020 <- by_month_table_2020[5][1]
by_month_table_2019 <- table(months(in_2019))
View(by_month_table_2019)
july_2020 <- protest_each_month[5][1]
print(july_2020)
july_2019 <- by_month_table_2019[6][1]
print(july_2019)
change_july_protests <- july_2020 - july_2019
print(change_july_protests)
july_2019 <- table(months(in_2019))
change_july_protests <- protest_each_month["July"] - july_2019["July"]
change_july_protests
july_2020
july_2020 <- protest_each_month[7][1]
july_2020
july_2020 <- protest_each_month[8][1]
july_2020
july_2019 <- (date[date >= "2019-07-01"]) & (date[date >= "2019-07-31"])
print((date[date >= "2019-07-01"]) & (date[date >= "2019-07-31"]))
View(Date)
View(dates)
dates
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
july_2019 <- length(dates[dates >= "2019-07-01" & dates >= "2019-07-31"])
july_2019
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
july_2019 <- length(dates[dates >= "2019-07-01" & dates >= "2019-07-31"])
july_2020 <- length(dates[dates >= "2020-07-01" & dates >= "2020-07-31"])
change_july_protests <- length(july_2020 - july_2020)
change_july_protests <- july_2020 - july_2020
change_july_protests <- length(july_2020 - july_2020)
change_july_protests
july_2019
july_2020
change_july_protests <- length(july_2020) - length(july_2020)
change_july_protests
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
change_july_protests <- sum(length(july_2020) - length(july_2020))
change_july_protests
change_july_protests <- length[july_2020 - july_2020]
change_july_protests <- length(july_2020 - july_2020)
change_july_protests <- length(july_2020 - july_2019)
change_july_protests <- length(july_2020) - length(july_2019)
change_july_protests
change_july_protests <- length(july_2019) - length(july_2020)
change_july_protests <- length(july_2019 - july_2020)
july_2019
change_july_protests <- c(july_2019 - july_2020)
# Install and load the "fueleconomy" package
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
library(nycflights13)
View(nycflights13)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
View(flights)
biggest_avg_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
library("nycflights13")
library("dplyr")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
biggest_avg_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
View(biggest_avg_delay)
View(flights)
knitr::opts_chunk$set(echo = TRUE)
letters <- c("a", "b", "c", "d")
numbers_vec <- 1:4
df_table_to_render <- data.frame(letters = letters_vec, numbers = numbers_vec)
letters_vec <- c("a", "b", "c", "d")
numbers_vec <- 1:4
df_table_to_render <- data.frame(letters = letters_vec, numbers = numbers_vec)
#give me a table and render it
kable(df_table_to_render)
library(knitr)
letters_vec <- c("a", "b", "c", "d")
numbers_vec <- 1:4
df_table_to_render <- data.frame(letters = letters_vec, numbers = numbers_vec)
#give me a table and render it
kable(df_table_to_render)
library(tidyverse)
# reading in the file
c02_data <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv")
shiny::runApp('info201/exercises/a5')
View(c02_data)
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
runApp('info201/exercises/a5')
# Reading in data
df <- read.csv('https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-codebook.csv', stringsAsFactors = FALSE)
# Reading in data
df <- read.csv('https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-codebook.csv', stringsAsFactors = FALSE)
View(df)
df <- df %>%
select(column)
# Reading in libraries
library(shiny)
library(tidyverse)
library(ggplot2)
library(shinythemes)
df <- df %>%
select(column)
View(df)
# Join together state.codes and df
joined_data <- merge(df, data)
df <- df %>%
subset(df, select = 1)
df[1]
df <- df[1]
# Join together state.codes and df
joined_data <- merge(df, data)
# Reading in data
df <- read.csv('https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-codebook.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- merge(df, data)
data <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv", stringsAsFactors = FALSE)
df <- df[1]
# Join together state.codes and df
joined_data <- merge(df, data)
View(joined_data)
runApp('info201/assignments/a5-maiab3/a5_maiab3')
runApp('info201/assignments/a5-maiab3/a5_maiab3')
avg_change <- data %>%
select(country, year, co2) %>%
filter(year == "1990") %>%
replace(is.na(.), 0) %>%
group_by(country) %>%
summarise(avg_c02_emissions = mean(co2, na.rm = TRUE)) %>%
head(10)
shiny::runApp('info201/assignments/a5-maiab3/a5')
runApp('info201/assignments/a5-maiab3/a5')
runApp('info201/assignments/a5-maiab3/a5')
runApp('info201/assignments/a5-maiab3/a5')
runApp('info201/assignments/a5-maiab3/a5')
runApp('info201/assignments/a5-maiab3/a5')
runApp('info201/assignments/a5-maiab3/a5')
setwd("~/info201/assignments/a5-maiab3/a5")
runApp()
